#!/bin/bash

set -eu -o pipefail
shopt -qs failglob

for opt in "$@"; do
   optarg="$(expr "${opt}" : '[^=]*=\(.*\)')"
   case "${opt}" in
      --disk-image-name=*) DISK_IMAGE_NAME="${optarg}" ;;
      --boot-image-name=*) BOOT_IMAGE_NAME="${optarg}" ;;
      --verity-image-name=*) VERITY_IMAGE_NAME="${optarg}" ;;
      --root-image-name=*) ROOT_IMAGE_NAME="${optarg}" ;;
      --package-dir=*) PACKAGE_DIR="${optarg}" ;;
      --output-dir=*) OUTPUT_DIR="${optarg}" ;;
   esac
done

mkdir -p "${OUTPUT_DIR}"
rm -f "${OUTPUT_DIR}/${DISK_IMAGE_NAME}" \
    "${OUTPUT_DIR}/${BOOT_IMAGE_NAME}" \
    "${OUTPUT_DIR}/${VERITY_IMAGE_NAME}" \
    "${OUTPUT_DIR}/${ROOT_IMAGE_NAME}"

DISK_IMAGE="$(mktemp)"
BOOT_IMAGE="$(mktemp)"
VERITY_IMAGE="$(mktemp)"
ROOT_IMAGE="$(mktemp)"
DATA_IMAGE="$(mktemp)"
ROOT_MOUNT="/mnt/root"

VERITY_VERSION=1
VERITY_HASH_ALGORITHM=sha256
VERITY_DATA_BLOCK_SIZE=4096
VERITY_HASH_BLOCK_SIZE=4096

# Define partition type GUIDs for all OS-managed partitions. This is required
# for the boot partition, where we set gptprio bits in the GUID-specific use
# field, but we might as well do it for all of them.
THAR_BOOT_TYPECODE="6b636168-7420-6568-2070-6c616e657421"
THAR_ROOT_TYPECODE="5526016a-1a97-4ea4-b39a-b7c8c6ca4502"
THAR_HASH_TYPECODE="598f10af-c955-4456-6a99-7720068a6cea"
THAR_RESERVED_TYPECODE="0c5d99a5-d331-4147-baef-08e2b855bdc9"

truncate -s 4G "${DISK_IMAGE}"
# boot: 20M + root: 900M + hash: 8M + reserved: 95M = 1023M
# boot partition attributes (-A): 48 = gptprio priority bit; 56 = gptprio successful bit
# partitions are backwards so that we don't make things inconsistent when specifying a wrong end sector :)
sgdisk --clear \
   -n 0:2048M:4095M -c 0:"THAR-DATA"       -t 0:8300 \
   -n 0:1953M:0     -c 0:"THAR-RESERVED-B" -t 0:"${THAR_RESERVED_TYPECODE}" \
   -n 0:1945M:0     -c 0:"THAR-HASH-B"     -t 0:"${THAR_HASH_TYPECODE}" \
   -n 0:1045M:0     -c 0:"THAR-ROOT-B"     -t 0:"${THAR_ROOT_TYPECODE}" \
   -n 0:1025M:0     -c 0:"THAR-BOOT-B"     -t 0:"${THAR_BOOT_TYPECODE}" -A 0:"clear":48 -A 0:"clear":56 \
   -n 0:930M:0      -c 0:"THAR-RESERVED-A" -t 0:"${THAR_RESERVED_TYPECODE}" \
   -n 0:922M:0      -c 0:"THAR-HASH-A"     -t 0:"${THAR_HASH_TYPECODE}" \
   -n 0:22M:0       -c 0:"THAR-ROOT-A"     -t 0:"${THAR_ROOT_TYPECODE}" \
   -n 0:2M:0        -c 0:"THAR-BOOT-A"     -t 0:"${THAR_BOOT_TYPECODE}" -A 0:"set":48 -A 0:"set":56 \
   -n 0:1M:0        -c 0:"BIOS-BOOT"          -t 0:ef02 \
   --sort --print "${DISK_IMAGE}"

mkdir -p "${ROOT_MOUNT}"
rpm -iv --root "${ROOT_MOUNT}" "${PACKAGE_DIR}"/*.rpm
rm -rf "${ROOT_MOUNT}"/var/lib

# MBR and BIOS-BOOT
echo "(hd0) ${DISK_IMAGE}" > ${ROOT_MOUNT}/boot/grub/device.map
"${ROOT_MOUNT}/sbin/grub-bios-setup" \
  --directory="${ROOT_MOUNT}/boot/grub" \
  --device-map="${ROOT_MOUNT}/boot/grub/device.map" \
  --root="hd0" \
  --skip-fs-probe \
  ${DISK_IMAGE}

rm -vf "${ROOT_MOUNT}"/boot/grub/* "${ROOT_MOUNT}"/sbin/grub*

# Now that we're done messing with /, move /boot out of it
BOOT_MOUNT="/mnt/boot"
mkdir "${BOOT_MOUNT}"
mv "${ROOT_MOUNT}/boot"/* "${BOOT_MOUNT}"

# THAR-ROOT-A
mkfs.ext4 -O ^has_journal -b "${VERITY_DATA_BLOCK_SIZE}" -d "${ROOT_MOUNT}" "${ROOT_IMAGE}" 900M
resize2fs -M "${ROOT_IMAGE}"
dd if="${ROOT_IMAGE}" of="${DISK_IMAGE}" conv=notrunc bs=512 seek=$((22*2048))

# THAR-VERITY-A
truncate -s 8M "${VERITY_IMAGE}"
veritysetup_output="$(veritysetup format \
    --format "$VERITY_VERSION" \
    --hash "$VERITY_HASH_ALGORITHM" \
    --data-block-size "$VERITY_DATA_BLOCK_SIZE" \
    --hash-block-size "$VERITY_HASH_BLOCK_SIZE" \
    "${ROOT_IMAGE}" "${VERITY_IMAGE}" \
    | tee /dev/stderr)"
if ! stat -c %s "${VERITY_IMAGE}" | grep -q '^8388608$'; then
    "verity partition is larger than expected (4M)"
    exit 1
fi
VERITY_DATA_4K_BLOCKS="$(grep '^Data blocks:' <<<$veritysetup_output | awk '{ print $NF }')"
VERITY_DATA_512B_BLOCKS="$(($VERITY_DATA_4K_BLOCKS * 8))"
VERITY_ROOT_HASH="$(grep '^Root hash:' <<<$veritysetup_output | awk '{ print $NF }')"
VERITY_SALT="$(grep '^Salt:' <<<$veritysetup_output | awk '{ print $NF }')"
veritysetup verify "${ROOT_IMAGE}" "${VERITY_IMAGE}" "${VERITY_ROOT_HASH}"
dd if="${VERITY_IMAGE}" of="${DISK_IMAGE}" conv=notrunc bs=512 seek=$((922*2048))

# write GRUB config
cat <<EOF > ${BOOT_MOUNT}/grub/grub.cfg
set default="0"
set timeout="0"

menuentry "Thar" {
   linux (\$root)/vmlinuz root=/dev/dm-0 rootwait ro init=/sbin/preinit \\
       audit=0 console=tty0 console=ttyS0 \\
       systemd.log_target=journal-or-kmsg net.ifnames=0 biosdevname=0 \\
       dm_verity.error_behavior=3 dm_verity.max_bios=-1 dm_verity.dev_wait=1 \\
       dm-mod.create="root,,,ro,0 $VERITY_DATA_512B_BLOCKS verity $VERITY_VERSION PARTUUID=\$boot_uuid/PARTNROFF=1 PARTUUID=\$boot_uuid/PARTNROFF=2 \\
       $VERITY_DATA_BLOCK_SIZE $VERITY_HASH_BLOCK_SIZE $VERITY_DATA_4K_BLOCKS 1 $VERITY_HASH_ALGORITHM $VERITY_ROOT_HASH $VERITY_SALT"
}
EOF

# THAR-BOOT-A
mkfs.ext4 -O ^has_journal -d "${BOOT_MOUNT}" "${BOOT_IMAGE}" 20M
resize2fs -M "${BOOT_IMAGE}"
dd if="${BOOT_IMAGE}" of="${DISK_IMAGE}" conv=notrunc bs=512 seek=$((2*2048))

# THAR-DATA
mkfs.ext4 "${DATA_IMAGE}" 2047M
dd if="${DATA_IMAGE}" of="${DISK_IMAGE}" conv=notrunc,sparse bs=512 seek=$((2048*2048))

sgdisk -v "${DISK_IMAGE}"

mv "${DISK_IMAGE}" "${OUTPUT_DIR}/${DISK_IMAGE_NAME}"
lz4 -9vc "${BOOT_IMAGE}" >"${OUTPUT_DIR}/${BOOT_IMAGE_NAME}"
lz4 -9vc "${VERITY_IMAGE}" >"${OUTPUT_DIR}/${VERITY_IMAGE_NAME}"
lz4 -9vc "${ROOT_IMAGE}" >"${OUTPUT_DIR}/${ROOT_IMAGE_NAME}"
chown 1000:1000 "${OUTPUT_DIR}/${DISK_IMAGE_NAME}" \
    "${OUTPUT_DIR}/${BOOT_IMAGE_NAME}" \
    "${OUTPUT_DIR}/${VERITY_IMAGE_NAME}" \
    "${OUTPUT_DIR}/${ROOT_IMAGE_NAME}"
